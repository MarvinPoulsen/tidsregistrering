<?xml version="1.0" encoding="UTF-8"?>
<datasources>
    <endpoint endpointtype="postgis" name="ep_lk_tasm">
        <connect>[cbinfo.pg_endpoint.connect]</connect>
        <user>[cbinfo.pg_endpoint.usr]</user>
        <pwd>[cbinfo.pg_endpoint.pwd]</pwd>
    </endpoint>
    <datasource endpoint="ep_lk_tasm" name="lk_tasm_registration">
        <!-- <debug>true</debug> -->
        <table name="registration" pkcolumn="id" schema="tasm"/>
        <sql command="read-by-user">select * from tasm.registration where user_id=[string:getUsershortid(sessionid)];</sql>
        <sql command="insert-registration">
            insert into 
                tasm.registration(
                    user_id,
                    task_date,
                    task_time,
                    task_id,
                    last_modified,
                    task_start,
                    task_end,
                    note,
                    all_day
                ) 
                values (
                    [string:getUsershortid(sessionid)],
                    [timestamp:toTimestamp(taskDate, 'yyyy-MM-dd')],
                    [number:taskTime],
                    [number:taskId],
                    CURRENT_TIMESTAMP,
                    [timestamp:toTimestamp(taskStart, 'yyyy-MM-dd HH:mm')],
                    [timestamp:toTimestamp(taskEnd, 'yyyy-MM-dd HH:mm')],
                    [string:if isdefined (note) then note else NULL endif],
                    [boolean:allDay='true']
                );
        </sql>
        <sql command="delete-by-id">delete from tasm.registration where id=[number:id];</sql>
        <sql command="update-by-id">
            update tasm.registration
            set 
                task_date = [timestamp:toTimestamp(taskDate, 'yyyy-MM-dd')], 
                task_time = [number:taskTime], 
                task_id = [number:taskId],
                last_modified = CURRENT_TIMESTAMP, 
                task_start = [timestamp:toTimestamp(taskStart, 'yyyy-MM-dd HH:mm')],
                task_end = [timestamp:toTimestamp(taskEnd, 'yyyy-MM-dd HH:mm')],
                note = [string:if isdefined (note) then note else NULL endif],
                all_day = [boolean:allDay='true']
            where
                id = [number: id];
        </sql>
    </datasource>
    <datasource endpoint="ep_lk_tasm" name="lk_tasm_tasks">
        <table name="tasks" pkcolumn="id" schema="tasm"/>
        <sql command="read-current">select * from tasm.tasks where obsolete='false';</sql>
    </datasource>
    <datasource endpoint="ep_lk_tasm" name="lk_tasm_projects">
        <table name="projects" pkcolumn="id" schema="tasm"/>
        <sql command="read-current">select * from tasm.projects where obsolete='false';</sql>
    </datasource>
    <datasource endpoint="ep_lk_tasm" name="lk_tasm_users">
        <table name="users" pkcolumn="id" schema="tasm"/>
    </datasource>
    <datasource endpoint="ep_lk_tasm" name="lk_tasm_favorites">
        <table name="favorites" pkcolumn="id" schema="tasm"/>
        <sql command="read-by-user">select * from tasm.favorites where user_id=[string:getUsershortid(sessionid)];</sql>
        <sql command="delete-by-user">delete from tasm.favorites where user_id=[string:getUsershortid(sessionid)];</sql>
        <sql command="insert">
            insert into tasm.favorites 
                (user_id, task_id)
            values 
                ([string:getUsershortid(sessionid)], [number:taskId]);
        </sql>
    </datasource>
    <!-- ADMINISTRATOR -->
    <!-- <endpoint endpointtype="postgis" name="ep_lk_tasm_admin" permissionlevel="authorized"> -->
    <endpoint endpointtype="postgis" name="ep_lk_tasm_admin">
        <connect>[cbinfo.pg_endpoint.connect]</connect>
        <user>[cbinfo.pg_endpoint.usr]</user>
        <pwd>[cbinfo.pg_endpoint.pwd]</pwd>
    </endpoint>
    <datasource endpoint="ep_lk_tasm_admin" name="lk_tasm_admin_projects">
        <table name="projects" pkcolumn="id" schema="tasm"/>
        <sql command="insert-project">
            insert into 
                tasm.projects(
                    group_id,
                    project_name,
                    horizon,
                    importance,
                    timeframe,
                    sbsys_id,
                    obsolete
                ) 
                values (
                    [string:if isdefined (groupId) then groupId else NULL endif],
                    [string:if isdefined (projectName) then projectName else NULL endif],
                    [timestamp:toTimestamp(horizon, 'yyyy-MM-dd')],
                    [number:importance],
                    [number:timeframe],
                    [number:sbsysId],
                    [boolean:obsolete='true']
                );
        </sql>
        <sql command="update-project-by-id">
            update tasm.projects
            set 
                group_id = [string:if isdefined (groupId) then groupId else NULL endif],
                project_name = [string:if isdefined (projectName) then projectName else NULL endif],
                horizon = [timestamp:toTimestamp(horizon, 'yyyy-MM-dd')],
                importance = [number:importance],
                timeframe = [number:timeframe],
                sbsys_id = [number:sbsysId],
                obsolete = [boolean:obsolete='true']
            where
                id = [number: id];
        </sql>
    </datasource>
    <datasource endpoint="ep_lk_tasm_admin" name="lk_tasm_admin_tasks">
        <table name="tasks" pkcolumn="id" schema="tasm"/>
        <sql command="insert-task">
            insert into 
                tasm.tasks(
                    project_id,
                    task_name,
                    milestone,
                    importance,
                    timeframe,
                    description,
                    obsolete
                ) 
                values (
                    [number:projectId],
                    [string:if isdefined (taskName) then taskName else NULL endif],
                    [timestamp:toTimestamp(milestone, 'yyyy-MM-dd')],
                    [number:importance],
                    [number:timeframe],
                    [string:if isdefined (description) then description else NULL endif],
                    [boolean:obsolete='true']
                );
        </sql>
        <sql command="update-task-by-id">
            update tasm.tasks
            set 
                project_id = [number:projectId],
                task_name = [string:if isdefined (taskName) then taskName else NULL endif],
                milestone = [timestamp:toTimestamp(milestone, 'yyyy-MM-dd')],
                importance = [number:importance],
                timeframe = [number:timeframe],
                description = [string:if isdefined (description) then description else NULL endif],
                obsolete = [boolean:obsolete='true']
            where
                id = [number: id];
        </sql>
    </datasource>

</datasources>